#pragma kernel CSMain
#define THREADS 256

#include "UnityCG.cginc"

float hash(float n) {
	return frac(sin(n) * 43758.5453);
}

// The noise function returns a value in the range -1.0f -> 1.0f
float noise1(float3 x) {
	float3 p = floor(x);
	float3 f = frac(x);

	f = f * f * (3.0 - 2.0 * f);
	float n = p.x + p.y * 57.0 + 113.0 * p.z;

	return lerp(lerp(lerp(hash(n + 0.0), hash(n + 1.0), f.x),
	                 lerp(hash(n + 57.0), hash(n + 58.0), f.x), f.y),
	            lerp(lerp(hash(n + 113.0), hash(n + 114.0), f.x),
	                 lerp(hash(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);
}

float2 norm(float2 v) {
	float l = length(v);
	return (l < 1) ? v : v / l;
}

float2 norm_no_zero(float2 v) {
	float l = length(v);
	return (l < 0.0001) ? float2(1.0, 0.0) : v / l;
}

struct Boid
{
	float2 position;
	float2 direction;
	float2 target_pos;
	uint group_id;
	int targeted_unit;
};

struct GroupParams
{
	uint team;
	float speed;
	float attack_radius;
};

RWStructuredBuffer<Boid> boid_buffer;
StructuredBuffer<GroupParams> group_params_buffer;

CBUFFER_START(Params)
float delta_time;
float neighbour_distance;
uint boids_count;
CBUFFER_END

[numthreads(THREADS,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
	const uint instance_id = id.x;
	Boid boid = boid_buffer[instance_id];

	const float boid_speed = group_params_buffer[boid.group_id].speed;
	const uint team = group_params_buffer[boid.group_id].team;
	const float attack_radius = group_params_buffer[boid.group_id].attack_radius;

	//float velocity = BoidSpeed * (1.0 + noise * BoidSpeedVariation);
	float velocity = boid_speed;

	const float2 boid_pos = boid.position;


	float2 alignment = float2(0.0, 0.0);
	float2 separation = float2(0.0, 0.0);
	float2 to_target = boid.target_pos;

	uint nearby_count = 1; // Add self that is ignored in loop
	float min_sqr_dist = attack_radius * attack_radius;

	boid.targeted_unit = -1;
	float separation_desire = 0.0;
	for (uint i = 0; i < boids_count; i++)
	{
		if (i == instance_id)
			continue;

		const float2 to_other = boid_buffer[i].position - boid_pos;
		const float sqr_dist = dot(to_other, to_other);

		const uint other_team = group_params_buffer[boid_buffer[i].group_id].team;
		if (other_team != team)
		{
			if (sqr_dist < min_sqr_dist && sqr_dist < attack_radius * attack_radius)
			{
				boid.targeted_unit = i;
				min_sqr_dist = sqr_dist;
			}
		}

		if (sqr_dist < neighbour_distance * neighbour_distance)
		{
			const float2 temp_boid_position = boid_buffer[i].position;

			const float2 diff = boid_pos - temp_boid_position;
			const float diff_len = (length(diff));
			const float scaler = clamp(1.0 - diff_len / neighbour_distance, 0.0, 1.0);
			
			separation += diff * (scaler / diff_len);
			separation_desire += scaler;
			if(other_team == team)
			{
				alignment += boid_buffer[i].direction;
			}

			nearby_count += 1;
		}
	}


	float avg = 1.0 / nearby_count;
	//cohesion *= avg;
	alignment *= avg;
	to_target = norm(to_target - boid_pos);

	//separation = norm(separation);

	const float2 direction = separation + to_target; //*(1-separationDesire)

	//float ip = exp();
	//boid.direction = lerp((direction), normalize(boid_dir), -RotationSpeed * DeltaTime);
	//boid.direction = norm(direction);
	if (boid.targeted_unit != -1)
	{
		const float2 from_target_unit = -norm(boid_buffer[boid.targeted_unit].position - boid.position);
		float dot_p = dot(boid.direction, from_target_unit);
		if (dot_p < 0.0)
		{
			dot_p = 0.1;
		}
		velocity = velocity * dot_p;
		//velocity = velocity * 0.1;
	}
	
	//float ip = exp(-10 * delta_time);
	boid.direction = lerp((direction), norm(boid.direction), 0.9);
	boid.position += (boid.direction) * (velocity * delta_time);

	boid_buffer[id.x] = boid;
}
